<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Eric Heydenblog (Posts about sparse matrices)</title><link>http://heydenberk.com/blog/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://heydenberk.com/blog/categories/sparse-matrices.xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:eric@heydenberk.com"&gt;Eric Heydenberk&lt;/a&gt; </copyright><lastBuildDate>Sat, 25 Nov 2017 14:18:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Sparse matrix representations in scipy</title><link>http://heydenberk.com/blog/posts/sparse-matrix-representations-in-scipy/</link><dc:creator>Eric Heydenberk</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Introduction-to-sparse-matrices"&gt;Introduction to sparse matrices&lt;a class="anchor-link" href="http://heydenberk.com/blog/posts/sparse-matrix-representations-in-scipy/#Introduction-to-sparse-matrices"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A sparse matrix is just a matrix that is mostly zero. Typically, when people talk about sparse matrices in numerical computations, they mean matrices that are mostly zero and are represented in a way that takes advantage of that sparsity to reduce required storage or optimize operations.&lt;/p&gt;
&lt;p&gt;As an extreme case, imagine a $M \times N$ matrix where $M = N = 1000000$, which is entirely zero save for a single $1$ at $(42, 999999)$. It's obvious that storing a trillion values—or 64Tb of 64-bit integers—is unnecessary, and we can write software which just assumes that the value is 0 at every index besides row $42$, column $999999$. We can describe this entire matrix with 5 integers:&lt;/p&gt;
&lt;p&gt;$M=1000000$, $N=1000000$&lt;/p&gt;
&lt;p&gt;$v=1$, $r=42$, $c=999999$.&lt;/p&gt;
&lt;p&gt;If we had a second value $3$ at position $(33, 34)$, the same scheme would still work reasonably well:&lt;/p&gt;
&lt;p&gt;$M=1000000$, $N=1000000$&lt;/p&gt;
&lt;p&gt;$v_0=1$, $r_0=42$, $c_0=999999$&lt;/p&gt;
&lt;p&gt;$v_1=3$, $r_1=33$, $c_1=34$.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://heydenberk.com/blog/posts/sparse-matrix-representations-in-scipy/"&gt;Read more…&lt;/a&gt; (31 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>matrices</category><category>numpy</category><category>python</category><category>scipy</category><category>sparse matrices</category><guid>http://heydenberk.com/blog/posts/sparse-matrix-representations-in-scipy/</guid><pubDate>Sat, 25 Nov 2017 13:00:00 GMT</pubDate></item></channel></rss>